#!/bin/sh
# sws - simple website
# Tries to be both simple and flexible, relying on plugins adding hooks
# or overriding functions to do more than converting a folder of .md
# files to .html.

## Utility functions
die () { printf "Error: %s\n" "$*"; exit 1; }
is_defined () { type "$1" >/dev/null 2>&1; }
call_ifdef () { is_defined "$1" && "$@"; }
change_ext () { sed -e 's/\.'"$1"'$/\.'"$2"'/g'; }

## Hooks
add_hook () {
  case "$1" in
    (before) hooks_before="$hooks_before $2" ;;
    (during) hooks_during="$hooks_during $2" ;;
    (after)  hooks_after="$hooks_after $2" ;;
  esac
}

do_hooks () {
  case "$1" in
    (before) hooks="$hooks_before" ;;
    (during) hooks="$hooks_during" ;;
    (after)  hooks="$hooks_after" ;;
  esac
  shift
  for hook in $hooks; do
    "$hook" "$@"
  done
}

### Handle premature exits
trap "exit 2" HUP INT QUIT TERM

## Templating
# **Very** simple templating system - lines starting with `%` are passed
# through, and variables can be embedded with `{{name}}` (also works with
# subshells with `{{(shell)}}`).
source_template () {
  tmpfile="$(mktemp)"
  awk -f- -v name="$2" "$1" > "${tmpfile}" <<'END_OF_SCRIPT'
function escape (s) { gsub(/'/, "'\"'\"'", s); return s; }
BEGIN { print(name " () {"); }
 /^%/ { print(substr($0, 2)); }
!/^%/ { while (match($0, /{{[^}]+}}/)) {
    target = substr($0, RSTART+2, RLENGTH-4);
    print("printf '%s' '" escape(substr($0, 1, RSTART-1)) "'");
    print("printf '%s' \"${" target "}\"");
    $0 = substr($0, RSTART+RLENGTH); }
  print("printf '%s\\n' '" escape($0) "'"); }
END { print("}"); }
END_OF_SCRIPT
  . "${tmpfile}"
  rm -f "${tmpfile}"
}

## Sws functions
get_meta() {
  { [ -z "$1" ] || [ ! -r "$1" ]; } && return
  grep "$1" -e "^%$2" | sed 's|^%[A-Z] ||g'
}

sws_skip () {
  case "$1" in
    (*/_*) true ;;
    (*)    false ;;
  esac
}

sws_page () {
  [ -z "$page_date" ] && page_date="$(get_meta "$from" "D")"
  [ -z "$page_title" ] && page_title="$(get_meta "$from" "T")"
  [ -n "$page_title" ] && title="$page_title" || title="$site_title"
  [ -n "$page_title" ] && joiner=" - "
  prefix="${basedir-.}$(dirname "/$from" | sed -e 's|/\w\+|/..|g' -e 's|^/..||g')"
  
  call_ifdef header
  cat
  call_ifdef footer
}

sws_markup () {
  grep -v -e '^%' "$1" | case "$1" in
    (*.md)  ${MARKDOWN-lowdown} ;;
    (*.html) cat ;;
  esac
}

sws_handle () {
  name="$(echo "$1" | sed -e 's|^'"${src}"'|'"${dst}"'|g')"
  name="$(echo "$name" | change_ext md html)"
  bare="$(basename "$name" | sed -e 's/\.html//g')"
  mkdir -p "$(dirname "$name")"
  case "$1" in
    (*.md|*.html) sws_markup "$1" | sws_page > "$name" ;;
    (*)           cp "$1" "$name" ;;
  esac
}

## Main script
generate () {
  src="${1:?source folder required}"
  dst="${2:?destination folder required}"
  # Load configuration file from the source folder
  { [ -r "${src}/_config" ] && . "${src}/_config"; } || die "configuration file not found"
  # Load plugins if present
  if [ -d "${src}/${plugins_folder=_plugins}" ]; then
    plugins_list="$(mktemp)"
    find "${src}/${plugins_folder}" -type f -or -type l -iname "*" | \
        sort > "${plugins_list}"
    # Workaround to have the variables updated or created by the loaded
    # plugins keep living outside the loop.
    # See <http://heirloom.sourceforge.net/sh/sh.1.html#20>
    exec 5<&0 <"${plugins_list}"
    while read -r plugin; do
      . "$plugin"
      export hooks_before hooks_during hooks_after
    done
    exec <&5 5<&-
    rm "${plugins_list}"
  fi
  # Load header and footer templates, if present
  [ -r "${src}/${head_tmpl=_header}" ] && source_template "${src}/${head_tmpl}" "header"
  [ -r "${src}/${foot_tmpl=_footer}" ] && source_template "${src}/${foot_tmpl}" "footer"
  # Go through the source folder
  do_hooks before
  # Do not touch the `set -f` unless you want to swear up a storm trying
  # to find a way to make variable arguments to find co-exist with blobs
  # that should be evaluated by it.
  set -f
  find "$src" ${find_opts_pre} -type f -iname "*" $find_opts_post | \
  while read -r from; do
    set +f
    sws_skip "${from}" && continue
    sws_handle "${from}"
    do_hooks during
    printf "* %s\n" "${from}"
  done
  do_hooks after
}

generate "$@"
