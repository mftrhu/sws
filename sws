#!/bin/sh
# sws - simple website
# Tries to be both simple and flexible, relying on plugins adding hooks
# or overriding functions to do more than converting a folder of .md
# files to .html.

## Utility functions
die () { printf "Error: %s\n" "$*"; exit 1; }
call_ifdef () { type "$1" >/dev/null 2>&1 && "$@"; }
change_ext () { sed -e 's/\.'"$1"'$/\.'"$2"'/g'; }

## Hooks
add_hook () {
  case "$1" in
    (before) hooks_before="$hooks_before $2" ;;
    (during) hooks_during="$hooks_during $2" ;;
    (after)  hooks_after="$hooks_after $2" ;;
  esac
}

do_hooks () {
  case "$1" in
    (before) hooks="$hooks_before" ;;
    (during) hooks="$hooks_during" ;;
    (after)  hooks="$hooks_after" ;;
  esac
  shift
  for hook in $hooks; do
    "$hook" $*
  done
}

## Templating
# **Very** simple templating system - lines starting with `%` are passed
# through, and variables can be embedded with `{{name}}` (also works with
# subshells with `{{(shell)}}`).
source_template () {
  tmpfile="$(mktemp)"
  awk -f- -v name="$2" "$1" > "${tmpfile}" <<'END_OF_SCRIPT'
function escape (s) { gsub(/'/, "'\"'\"'", s); return s; }
BEGIN { print(name " () {"); }
 /^%/ { print(substr($0, 2)); }
!/^%/ { while (match($0, /{{[^}]+}}/)) {
    target = substr($0, RSTART+2, RLENGTH-4);
    print("printf '%s' '" escape(substr($0, 1, RSTART-1)) "'");
    print("printf '%s' \"$" target "\"");
    $0 = substr($0, RSTART+RLENGTH); }
  print("printf '%s\\n' '" escape($0) "'"); }
END { print("}"); }
END_OF_SCRIPT
  . "${tmpfile}"
  rm -f "${tmpfile}"
}

## Sws functions
sws_skip () {
  case "$(basename "$1")" in
    (_*) true ;;
    (*)  false ;;
  esac
}

sws_page () {
  call_ifdef header
  cat
  call_ifdef footer
}

sws_handle () {
  name="$(echo "$1" | sed -e 's/^'"$src"'/'"$dst"'/g')"
  name="$(echo "$name" | change_ext md html)"
  mkdir -p "$(dirname "$name")"
  case "$1" in
    (*.md)  "${MARKDOWN-lowdown}" "$1" | sws_page > "$name" ;;
    (*.html) cat "$1" | sws_page > "$name" ;;
    (*)      cp "$1" "$name" ;;
  esac
}

## Main script
generate () {
  src="${1:?source folder required}"
  dst="${2:?destination folder required}"
  # Load configuration file from the source folder
  { [ -r "${src}/_config" ] && . "${src}/_config"; } || die "configuration file not found"
  # Load header and footer templates, if present
  [ -r "${src}/${head_tmpl=_header}" ] && source_template "${src}/${head_tmpl}" "header"
  [ -r "${src}/${foot_tmpl=_footer}" ] && source_template "${src}/${foot_tmpl}" "footer"
  # Go through the source folder
  do_hooks before
  find "$src" -type f -iname "*" | while read -r path; do
    sws_skip "${path}" && continue
    sws_handle "${path}"
    do_hooks during
    printf "* %s\n" "${path}"
  done
  do_hooks after
}

generate "$@"
